variables:
  CTEST_OUTPUT_ON_FAILURE: '1'
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases"


stages:
  - test
  - coverage
  - package
  - upload
  - release

#
# Test
#
Test Ubuntu 20.04:
  stage: test
  image: ubuntu:20.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake ..
    - make -j${nproc}
    - make test
  except:
    - develop
    - master

#
# Test
#
Test Ubuntu 22.04:
  stage: test
  image: ubuntu:22.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake ..
    - make -j${nproc}
    - make test
  except:
    - develop
    - master

#
# Test
#
Test Ubuntu 23.04:
  stage: test
  image: ubuntu:23.04
  script:
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake ..
    - make -j${nproc}
    - make test
  except:
    - develop
    - master

#
# Coverage
#
coverage:
  stage: coverage
  image: ubuntu:22.04
  script: 
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends lcov zip
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - rm -rf build && mkdir build && cd build
    - cmake -DTEST_COVERAGE=ON ..
    - make -j$(nproc)
    - make check_coverage
    - zip -r coverage.zip coverage
    - mv coverage.zip ../
  artifacts:
    name: "shmdata_coverage_${CI_BUILD_REF_NAME}"
    paths:
    - "coverage.zip"
  only:
    - develop

Debian Package Ubuntu 20.04:
  stage: package
  image: ubuntu:20.04
  rules:
    - if: $CI_COMMIT_TAG  # Run this job when a tag is created
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script: 
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends file
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends doxygen cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - mkdir -p release-files/
    - pushd .
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug ..
    - make doc
    - make package
    - |
      for i in shmdata-dbg*.deb; do cp $i ../release-files/ubuntu20.04_$i; done
    - popd
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
    - make package
    - |
      for i in shmdata-lib*.deb shmdata-dev*.deb; do cp $i ../release-files/ubuntu20.04_$i; done
  artifacts:
    paths:
    - release-files/

Debian Package Ubuntu 22.04:
  stage: package
  image: ubuntu:22.04
  rules:
    - if: $CI_COMMIT_TAG  # Run this job when a tag is created
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script: 
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends file
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends doxygen cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - mkdir -p release-files/
    - pushd .
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug ..
    - make doc
    - make package
    - |
      for i in shmdata-dbg*.deb; do cp $i ../release-files/ubuntu22.04_$i; done
    - popd
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
    - make package
    - |
      for i in shmdata-lib*.deb shmdata-dev*.deb; do cp $i ../release-files/ubuntu22.04_$i; done
  artifacts:
    paths:
    - release-files/

Debian Package Ubuntu 23.04:
  stage: package
  image: ubuntu:23.04
  rules:
    - if: $CI_COMMIT_TAG  # Run this job when a tag is created
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script: 
    - DEBIAN_FRONTEND=noninteractive apt update -y
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends file
    - DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends doxygen cmake build-essential git libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base python3-dev
    - mkdir -p release-files/
    - pushd .
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug ..
    - make doc
    - make package
    - |
      for i in shmdata-dbg*.deb; do cp $i ../release-files/ubuntu23.04_$i; done
    - popd
    - rm -rf build && mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
    - make package
    - |
      for i in shmdata-lib*.deb shmdata-dev*.deb; do cp $i ../release-files/ubuntu23.04_$i; done
  artifacts:
    paths:
    - release-files/

#
# Gitlab release
#
Gitlab release upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      for i in $(ls release-files/); do curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file release-files/${i} "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${i}"; done


Gitlab release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --description LAST_RELEASE.md \
        $(\
          for i in $(ls release-files/); do \
            echo --assets-link  "{\"name\":\"${i}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${i}\",\"link_type\":\"package\"}" ;\
          done \
         )
